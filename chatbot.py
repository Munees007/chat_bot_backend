import random
from fuzzywuzzy import process, fuzz
from firebase import fetch_chatbot_data

# def get_best_match(user_input, lang="en"):
#     chatbot_data = fetch_chatbot_data()
#     # Extract all questions in the selected language
#     question_list = {entry["questions"][lang]: entry for entry in chatbot_data.values() if lang in entry["questions"]}

#     # Use fuzzy matching to find the best match
#     best_match, score = process.extractOne(user_input, question_list.keys())

#     # Retrieve the corresponding answer
#     matched_entry = question_list[best_match]
#     answer = matched_entry["answer"].get(lang, "Sorry, I don't have an answer in this language.")

#     return best_match, score, answer





# Predefined sorry messages
import random


# Predefined sorry messages for different languages
SORRY_MESSAGES = {
    "en": [
        "Sorry, I couldn't understand your question. Please try again.",
        "I'm not sure about that. Can you rephrase?",
        "I don't have an answer for that. Try asking differently.",
        "I couldn't find a match. Please ask another way.",
    ],
    "ta": [
        "рооройрпНройро┐роХрпНроХро╡рпБроорпН, роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. родропро╡рпБроЪрпЖропрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
        "роОройроХрпНроХрпБродрпН родрпЖро│ро┐ро╡ро╛роХ роЗро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роЪрпКро▓рпНро▓ роорпБроЯро┐ропрпБрооро╛?",
        "роЗроирпНродроХрпН роХрпЗро│рпНро╡ро┐роХрпНроХрпБ роОройроХрпНроХрпБ рокродро┐ро▓рпН роЗро▓рпНро▓рпИ. ро╡рпЗро▒рпКро░рпБ роорпБро▒рпИропро┐ро▓рпН роХрпЗроЯрпНроХро╡рпБроорпН.",
        "рокрпКро░рпБродрпНродрооро╛рой рокродро┐ро▓рпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. рооро▒рпНро▒рпКро░рпБ роорпБро▒рпИропро┐ро▓рпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
    ],
    "te": [
        "р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░ор▒А р░кр▒Нр░░р░╢р▒Нр░ир░ир▒Б р░Ер░░р▒Нр░ер░В р░Ър▒Зр░╕р▒Бр░Хр▒Лр░▓р▒Зр░Хр░кр▒Лр░пр░╛р░ир▒Б. р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░▓р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.",
        "р░ир░╛р░Хр▒Б р░╕р▒Нр░кр░╖р▒Нр░Яр░Вр░Чр░╛ р░▓р▒Зр░жр▒Б. р░ор▒Ар░░р▒Б р░ор░│р▒Нр░▓р▒А р░Ър▒Жр░кр▒Нр░кр░Чр░▓р░░р░╛?",
        "р░жр░пр░Ър▒Зр░╕р░┐ р░╡р▒Зр░░р▒З р░╡р░┐р░зр░Вр░Чр░╛ р░Ер░бр░Чр░Вр░бр░┐.",
        "р░ир▒Зр░ир▒Б р░╕р░ор░╛р░зр░╛р░ир░В р░Зр░╡р▒Нр░╡р░▓р▒Зр░Хр░кр▒Лр░пр░╛р░ир▒Б. р░ор░░р▒Лр░╕р░╛р░░р░┐ р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.",
    ],
    "ml": [
        "р┤Хр╡Нр┤╖р┤ор┤┐р┤Хр╡Нр┤Хр┤гр┤В, р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ър╡Лр┤жр╡Нр┤пр┤др╡Нр┤др┤┐р╡╜ р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤др┤пр┤┐р┤▓р╡Нр┤▓. р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
        "р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤Ер┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤Йр┤др╡Нр┤др┤░р┤В р┤Ер┤▒р┤┐р┤пр┤┐р┤▓р╡Нр┤▓. р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
        "р┤Юр┤╛р╡╗ р┤Зр┤др┤┐р┤ир╡Н р┤Йр┤др╡Нр┤др┤░р┤В р┤ир╡╜р┤Хр┤╛р┤ир┤╛р┤Хр┤┐р┤▓р╡Нр┤▓. р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤ор┤▒р╡Нр┤▒р╡Кр┤░р╡Б р┤╡р┤┐р┤зр┤др╡Нр┤др┤┐р╡╜ р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
        "р┤Тр┤░р╡Б р┤кр╡Кр┤░р╡Бр┤др╡Нр┤др┤╡р╡Бр┤В р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤┐р┤пр┤┐р┤▓р╡Нр┤▓. р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤ор┤▒р╡Нр┤▒р╡Кр┤░р╡Б р┤░р╡Ар┤др┤┐р┤пр┤┐р╡╜ р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
    ],
    "hi": [
        "рдорд╛рдлрд╝ рдХреАрдЬрд┐рдП, рдореИрдВ рдЖрдкрдХреЗ рд╕рд╡рд╛рд▓ рдХреЛ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред",
        "рдореБрдЭреЗ рдпрдХреАрди рдирд╣реАрдВ рд╣реИред рдХреНрдпрд╛ рдЖрдк рдЗрд╕реЗ рджреЛрдмрд╛рд░рд╛ рд╕рдордЭрд╛ рд╕рдХрддреЗ рд╣реИрдВ?",
        "рдореБрдЭреЗ рдЗрд╕рдХрд╛ рдЬрд╡рд╛рдм рдирд╣реАрдВ рдкрддрд╛ред рдХреГрдкрдпрд╛ рджреВрд╕рд░реЗ рддрд░реАрдХреЗ рд╕реЗ рдкреВрдЫреЗрдВред",
        "рдореБрдЭреЗ рдХреЛрдИ рдЙрдкрдпреБрдХреНрдд рдЙрддреНрддрд░ рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рджреВрд╕рд░рд╛ рддрд░реАрдХрд╛ рдЕрдкрдирд╛рдПрдВред",
    ],
}

def get_best_match(user_input, lang="en", threshold=85):  
    chatbot_data = fetch_chatbot_data()

    if not isinstance(chatbot_data, list):
        raise ValueError("Expected chatbot_data to be a list but got", type(chatbot_data))

    # тЬЕ Normalize question list (supporting all languages, not just selected one)
    question_list = {}
    entry_map = {}

    for entry in chatbot_data:
        for q_lang, question in entry.get("questions", {}).items():
            normalized_question = question.lower()
            question_list[normalized_question] = entry
            entry_map[normalized_question] = q_lang  # Store language of each question

    print(f"User Input: {user_input}")

    if not question_list:
        print("тЭМ No questions found in the database!")
        return None, 0, "Sorry, no questions are available in the database."

    # тЬЕ Normalize input
    normalized_input = user_input.lower().strip()

    # тЬЕ 1. Check for an exact match (in any language)
    if normalized_input in question_list:
        matched_entry = question_list[normalized_input]
        print(f"тЬЕ Exact match found: {normalized_input}")

        # Retrieve the answer in the selected language
        answer = matched_entry["answer"].get(lang, None)

        hasValue = matched_entry["suggestions"].get("hasValue",False)
        reference = {}
        if suggestions["hasValue"] == True:
            reference = matched_entry["suggestions"]
        if answer:
            return normalized_input, 100, answer, reference,hasValue
        else:
            return normalized_input, 100, random.choice(SORRY_MESSAGES.get(lang, SORRY_MESSAGES["en"])), reference,hasValue

    # тЬЕ 2. Improve fuzzy matching for short inputs
    input_words = normalized_input.split()
    if len(input_words) <= 2:  # If input is very short (like "college name")
        threshold = 50  # Lower threshold for better matches

    # тЬЕ 3. Use `token_set_ratio` for better matching
    print("ЁЯФО No exact match found. Using fuzzy matching...")
    best_match, score = process.extractOne(normalized_input, question_list.keys(), scorer=fuzz.token_set_ratio)

    print(f"Best Match: {best_match}, Score: {score}")

    # тЬЕ 4. Return only if above threshold
    if score >= threshold:
        matched_entry = question_list[best_match]

        # Retrieve the answer in the selected language
        answer = matched_entry["answer"].get(lang, None)

        answer = matched_entry["answer"].get(lang, None)

        hasValue = matched_entry["suggestions"].get("hasValue",False)
        reference = {}
        if suggestions["hasValue"] == True:
            reference = matched_entry["suggestions"]
            
        if answer:
            return best_match, score, answer , reference,hasValue
        else:
            return best_match, score, random.choice(SORRY_MESSAGES.get(lang, SORRY_MESSAGES["en"])), reference,hasValue
    
    else:
        print("тЭМ Score below threshold. Returning default response.")
        return None, 0, random.choice(SORRY_MESSAGES.get(lang, SORRY_MESSAGES["en"])), reference,hasValue
